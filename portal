<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Player Login Portal</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap');

        :root {
            --primary-color: #0a2342;
            --secondary-color: #2ca58d;
            --accent-color: #ff6b6b;
            --background-color: #f0f4f8;
            --text-color: #333;
            --card-bg: #ffffff;
            --error-color: #d93025;
            --success-color: #1e8e3e;
            --border-color: #e0e0e0;
            --top-bar-height: 60px;
            --bottom-nav-height: 65px;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html {
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            height: 100vh;
            overflow: hidden;
        }

        /* --- Login/Signup Portal --- */
        .portal-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }

        .portal-wrapper {
            width: 100%;
            max-width: 450px;
            background-color: var(--card-bg);
            border-radius: 12px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .portal-wrapper .container {
            padding: 2rem 2.5rem;
        }

        .portal-wrapper header {
            background-color: var(--primary-color);
            color: white;
            padding: 1.5rem;
            text-align: center;
        }
        
        .portal-wrapper header h1 { font-size: 1.5rem; margin-bottom: 0.25rem; }
        .portal-wrapper header p { font-size: 0.9rem; opacity: 0.9; }

        .form-group { margin-bottom: 1.25rem; }
        label { display: block; font-weight: 600; margin-bottom: 0.5rem; font-size: 0.9rem; }
        input[type="text"], input[type="password"], input[type="date"], textarea {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 1rem;
            font-family: 'Poppins', sans-serif;
            transition: border-color 0.3s;
        }
        input:focus, textarea:focus { outline: none; border-color: var(--secondary-color); box-shadow: 0 0 0 2px rgba(44, 165, 141, 0.2); }

        .btn {
            width: 100%; padding: 0.9rem; border: none; border-radius: 8px;
            background-color: var(--secondary-color); color: white;
            font-size: 1.1rem; font-weight: 600; cursor: pointer;
            transition: background-color 0.3s; margin-top: 1rem;
        }
        .btn:hover { background-color: #238b74; }
        .btn.btn-secondary { background-color: #aaa; margin-top: 0.5rem; }
        .btn.btn-secondary:hover { background-color: #888; }


        .switch-link { text-align: center; margin-top: 1.5rem; font-size: 0.9rem; }
        .switch-link a { color: var(--secondary-color); font-weight: 600; text-decoration: none; cursor: pointer; }
        .switch-link a:hover { text-decoration: underline; }

        .message { text-align: center; padding: 0.75rem; border-radius: 8px; margin-bottom: 1rem; font-weight: 500; }
        .error { background-color: rgba(217, 48, 37, 0.1); color: var(--error-color); border: 1px solid var(--error-color); }
        .success { background-color: rgba(30, 142, 62, 0.1); color: var(--success-color); border: 1px solid var(--success-color); }

        #signup-container { display: none; }
        
        /* --- Main App UI --- */
        #app-wrapper {
            height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--card-bg);
            max-width: 500px; /* For a phone-like view on desktop */
            margin: 0 auto;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }

        #app-top-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 1rem;
            height: var(--top-bar-height);
            background-color: var(--card-bg);
            border-bottom: 1px solid var(--border-color);
            flex-shrink: 0;
        }
        #app-top-bar .logo { font-weight: 700; font-size: 1.5rem; color: var(--primary-color); }
        #app-top-bar .top-icons .material-icons-outlined { font-size: 28px; margin-left: 1rem; cursor: pointer; }

        #app-content {
            flex-grow: 1;
            overflow-y: auto;
            padding-top: var(--top-bar-height);
            padding-bottom: var(--bottom-nav-height);
            background-color: var(--background-color);
        }
        
        .screen {
            padding: 1rem;
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }

        /* Home Screen */
        #home-screen .welcome-banner {
            background: var(--primary-color);
            color: white;
            padding: 1.5rem 1rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        #home-username-app { color: var(--secondary-color); }
        .profile-info-app { margin-top: 1rem; font-size: 0.9rem; }
        .profile-info-app p { display: flex; justify-content: center; align-items: center; gap: 0.5rem; cursor: pointer; }
        #reg-number-display-app { font-family: monospace; font-size: 1.2rem; background: rgba(255,255,255,0.1); padding: 0.2rem 0.6rem; border-radius: 4px; }
        #copy-notification {
            position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%);
            background: #333; color: white; padding: 0.5rem 1rem; border-radius: 20px;
            font-size: 0.9rem; z-index: 100; opacity: 0; transition: opacity 0.3s, bottom 0.3s;
        }

        /* Posts Feed */
        #posts-feed { display: flex; flex-direction: column; gap: 1rem; }
        .post-card { background: var(--card-bg); border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); overflow: hidden; }
        .post-header { display: flex; align-items: center; padding: 0.75rem 1rem; gap: 0.5rem; }
        .post-header .avatar { width: 40px; height: 40px; border-radius: 50%; background: var(--secondary-color); color: white; display: grid; place-items: center; font-weight: 600; }
        .post-header .username { font-weight: 600; }
        .post-content { padding: 0.5rem 1rem; }
        .post-content .file-info { font-style: italic; color: #666; background: #f0f4f8; padding: 0.5rem; border-radius: 8px; }
        .post-actions { display: flex; gap: 1rem; padding: 0.5rem 1rem; }
        .post-actions .material-icons-outlined { cursor: pointer; font-size: 26px; }
        .post-caption { padding: 0 1rem; font-size: 0.95rem; }
        .post-caption .username { font-weight: 600; }
        .comments-section { padding: 0.5rem 1rem 1rem; border-top: 1px solid var(--border-color); margin-top: 1rem; }
        .comment { font-size: 0.9rem; margin-bottom: 0.5rem; }
        .comment .username { font-weight: 600; }
        .comment-form { display: flex; gap: 0.5rem; margin-top: 1rem; }
        .comment-form input { flex-grow: 1; }
        .comment-form button { background: none; border: none; cursor: pointer; color: var(--secondary-color); }
        #no-posts-message { text-align: center; color: #666; padding: 2rem; }

        /* Upload & Other Screens */
        #upload-screen, #settings-screen, #live-screen, #cart-screen, #unavailable-screen {
            padding-top: calc(var(--top-bar-height) + 1rem);
            height: 100%;
        }
        .screen h2 { text-align: center; margin-bottom: 2rem; color: var(--primary-color); }
        
        /* Settings Screen */
        .settings-list { list-style: none; }
        .settings-item {
            display: flex; justify-content: space-between; align-items: center;
            padding: 1rem; background: var(--card-bg); border-bottom: 1px solid var(--border-color);
            cursor: pointer; transition: background-color 0.2s;
        }
        .settings-item:first-child { border-top-left-radius: 12px; border-top-right-radius: 12px; }
        .settings-item:last-child { border-bottom: none; border-bottom-left-radius: 12px; border-bottom-right-radius: 12px; }
        .settings-item:hover { background-color: #f8f9fa; }
        .settings-item span { font-weight: 500; }
        .settings-item i { color: #ccc; }

        /* Bottom Nav Bar */
        #app-bottom-nav {
            position: fixed;
            bottom: 0; left: 0; right: 0;
            height: var(--bottom-nav-height);
            background-color: var(--card-bg);
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: space-around;
            align-items: center;
            z-index: 10;
            max-width: 500px; /* Match app-wrapper */
            margin: 0 auto;
        }
        .nav-item {
            display: flex; flex-direction: column; align-items: center;
            text-decoration: none; color: #999;
            flex-grow: 1; padding: 0.5rem 0;
            transition: color 0.2s;
        }
        .nav-item.active { color: var(--secondary-color); }
        .nav-item span { font-size: 0.75rem; }
        .nav-item.fab {
            color: white;
            background-color: var(--accent-color);
            width: 56px; height: 56px;
            border-radius: 50%;
            justify-content: center;
            margin-bottom: 30px;
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.5);
            flex-grow: 0;
        }
        .nav-item.fab .material-icons { font-size: 28px; }

    </style>
</head>
<body>

    <div id="portal-container">
        <div class="portal-wrapper">
            <!-- Login View -->
            <div id="login-container" class="container">
                <header>
                    <h1>National Future Stars</h1>
                    <p>Middle Elite Portal Login</p>
                </header>
                <form id="login-form" style="margin-top: 2rem;">
                    <div id="login-message" class="message" style="display:none;"></div>
                    <div class="form-group">
                        <label for="login-reg-number">Registration Number</label>
                        <input type="text" id="login-reg-number" required>
                    </div>
                    <div class="form-group">
                        <label for="login-username">Username</label>
                        <input type="text" id="login-username" required>
                    </div>
                    <div class="form-group">
                        <label for="login-dob">Date of Birth</label>
                        <input type="date" id="login-dob" required>
                    </div>
                    <div class="form-group">
                        <label for="login-password">Password</label>
                        <input type="password" id="login-password" required>
                    </div>
                    <button type="submit" class="btn">Login</button>
                </form>
                <p class="switch-link">Don't have an account? <a id="show-signup">Sign Up</a></p>
            </div>

            <!-- Signup View -->
            <div id="signup-container" class="container">
                <header>
                    <h1>Create Account</h1>
                    <p>Join the Elite Program</p>
                </header>
                <form id="signup-form" style="margin-top: 2rem;">
                    <div id="signup-message" class="message" style="display:none;"></div>
                    <div class="form-group">
                        <label for="signup-username">Username</label>
                        <input type="text" id="signup-username" required>
                    </div>
                    <div class="form-group">
                        <label for="signup-dob">Date of Birth</label>
                        <input type="date" id="signup-dob" required>
                    </div>
                    <div class="form-group">
                        <label for="signup-password">Password</label>
                        <input type="password" id="signup-password" required>
                    </div>
                    <button type="submit" class="btn">Sign Up</button>
                </form>
                <p class="switch-link">Already have an account? <a id="show-login">Login</a></p>
            </div>
        </div>
    </div>

    <!-- Main App View -->
    <div id="app-wrapper" style="display: none;">
        <header id="app-top-bar">
            <div class="logo">Elite</div>
            <div class="top-icons">
                <i class="material-icons-outlined" data-screen="unavailable-screen">chat_bubble_outline</i>
                <i class="material-icons-outlined" data-screen="unavailable-screen">favorite_border</i>
            </div>
        </header>

        <main id="app-content">
            <!-- This container will hold the active screen -->
        </main>

        <nav id="app-bottom-nav">
            <a href="#" class="nav-item active" data-screen="home-screen"><i class="material-icons">home</i><span>Home</span></a>
            <a href="#" class="nav-item active" data-screen="event-screen"><i class="material-icons">Calendar</i><span>Event</span></a>
            <a href="#" class="nav-item" data-screen="live-screen"><i class="material-icons">sensors</i><span>Live</span></a>
            <a href="#" class="nav-item fab" data-screen="upload-screen"><i class="material-icons">add</i></a>
            <a href="#" class="nav-item" data-screen="cart-screen"><i class="material-icons-outlined">shopping_cart</i><span>Cart</span></a>
            <a href="#" class="nav-item" data-screen="settings-screen"><i class="material-icons-outlined">settings</i><span>Settings</span></a>
        </nav>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DB KEYS ---
            const USER_DB_KEY = 'elite_portal_users';
            const POSTS_DB_KEY = 'elite_portal_posts';

            // --- PORTAL ELEMENTS ---
            const portalContainer = document.getElementById('portal-container');
            const loginContainer = document.getElementById('login-container');
            const signupContainer = document.getElementById('signup-container');
            const loginForm = document.getElementById('login-form');
            const signupForm = document.getElementById('signup-form');
            const loginMessage = document.getElementById('login-message');
            const signupMessage = document.getElementById('signup-message');
            const showSignupBtn = document.getElementById('show-signup');
            const showLoginBtn = document.getElementById('show-login');

            // --- APP ELEMENTS ---
            const appWrapper = document.getElementById('app-wrapper');
            const appContent = document.getElementById('app-content');
            const bottomNav = document.getElementById('app-bottom-nav');
            const topBarIcons = document.querySelector('#app-top-bar .top-icons');

            // --- HELPERS ---
            const getStoredData = (key) => JSON.parse(localStorage.getItem(key) || '[]');
            const saveData = (key, data) => localStorage.setItem(key, JSON.stringify(data));
            const showMessage = (el, text, type) => {
                el.textContent = text;
                el.className = `message ${type}`;
                el.style.display = 'block';
            };
            const hideMessage = (el) => el.style.display = 'none';
            const getCurrentUser = () => JSON.parse(sessionStorage.getItem('loggedInUser'));
            
            // --- TEMPLATES ---
            const screenTemplates = {
                'home-screen': () => `
                    <div id="home-screen" class="screen">
                        <div class="welcome-banner">
                            <h1>Welcome, <span id="home-username-app">${getCurrentUser().username}</span>!</h1>
                            <div class="profile-info-app">
                                <p id="reg-number-p">
                                    Registration: <span id="reg-number-display-app">${getCurrentUser().registrationNumber}</span> 
                                    <i class="material-icons-outlined copy-icon">content_copy</i>
                                </p>
                                <div id="copy-notification">Copied!</div>
                            </div>
                        </div>
                        <div id="posts-feed"></div>
                    </div>`,
                'upload-screen': () => `
                    <div id="upload-screen" class="screen">
                        <h2>Create Post</h2>
                        <form id="upload-form">
                            <div class="form-group">
                                <label for="file-upload">Upload Photo/Video/Music</label>
                                <input type="file" id="file-upload" accept="image/*,video/*,audio/*">
                            </div>
                            <div class="form-group">
                                <label for="caption">Caption</label>
                                <textarea id="caption" rows="4" placeholder="Write a caption..."></textarea>
                            </div>
                            <button type="submit" class="btn">Post</button>
                            <button type="button" class="btn btn-secondary" data-screen="home-screen">Cancel</button>
                        </form>
                    </div>`,
                'settings-screen': () => `
                    <div id="settings-screen" class="screen">
                        <h2>Settings</h2>
                        <ul class="settings-list">
                            <li class="settings-item" data-setting="profile"><span>Edit Profile</span><i class="material-icons-outlined">chevron_right</i></li>
                            <li class="settings-item" data-setting="notifications"><span>Notifications</span><i class="material-icons-outlined">chevron_right</i></li>
                            <li class="settings-item" data-setting="privacy"><span>Privacy</span><i class="material-icons-outlined">chevron_right</i></li>
                            <li class="settings-item" data-setting="themes"><span>Themes</span><i class="material-icons-outlined">chevron_right</i></li>
                            <li class="settings-item" data-setting="link"><span>Link Account</span><i class="material-icons-outlined">chevron_right</i></li>
                            <li class="settings-item" data-setting="premium"><span>Purchase Premium</span><i class="material-icons-outlined">chevron_right</i></li>
                            <li class="settings-item" id="app-logout-btn"><span>Logout</span><i class="material-icons-outlined">chevron_right</i></li>
                        </ul>
                    </div>`,
                'live-screen': () => `<div class="screen"><h2>Live</h2><p>This feature is not available at this time.</p></div>`,
                'cart-screen': () => `<div class="screen"><h2>Cart</h2><p>This feature is unavailable.</p></div>`,
                'unavailable-screen': () => `<div class="screen"><h2>Feature Unavailable</h2><p>This feature is currently under development. Check back later!</p></div>`
            };


            // --- PORTAL LOGIC ---
            const showPortalView = (view) => {
                loginContainer.style.display = view === 'login' ? 'block' : 'none';
                signupContainer.style.display = view === 'signup' ? 'block' : 'none';
            };

            showSignupBtn.addEventListener('click', (e) => { e.preventDefault(); showPortalView('signup'); });
            showLoginBtn.addEventListener('click', (e) => { e.preventDefault(); showPortalView('login'); });

            signupForm.addEventListener('submit', (e) => {
                e.preventDefault();
                hideMessage(signupMessage);
                const username = document.getElementById('signup-username').value.trim();
                const dob = document.getElementById('signup-dob').value;
                const password = document.getElementById('signup-password').value;

                if (!username || !dob || !password) return showMessage(signupMessage, 'All fields are required.', 'error');
                
                const users = getStoredData(USER_DB_KEY);
                if (users.find(user => user.username.toLowerCase() === username.toLowerCase())) {
                    return showMessage(signupMessage, 'Username already exists.', 'error');
                }
                
                let newRegNumber;
                do {
                    newRegNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();
                } while (users.some(user => user.registrationNumber === newRegNumber));
                
                const newUser = { username, dob, password, registrationNumber: newRegNumber };
                users.push(newUser);
                saveData(USER_DB_KEY, users);
                
                sessionStorage.setItem('loggedInUser', JSON.stringify(newUser));
                initializeApp();
            });

            loginForm.addEventListener('submit', (e) => {
                e.preventDefault();
                hideMessage(loginMessage);
                const [regNumber, username, dob, password] = [
                    document.getElementById('login-reg-number').value.trim(),
                    document.getElementById('login-username').value.trim(),
                    document.getElementById('login-dob').value,
                    document.getElementById('login-password').value
                ];

                if (!regNumber || !username || !dob || !password) return showMessage(loginMessage, 'All fields are required.', 'error');

                const users = getStoredData(USER_DB_KEY);
                const foundUser = users.find(user => 
                    user.registrationNumber === regNumber && user.username.toLowerCase() === username.toLowerCase() &&
                    user.dob === dob && user.password === password
                );

                if (foundUser) {
                    sessionStorage.setItem('loggedInUser', JSON.stringify(foundUser));
                    initializeApp();
                } else {
                    showMessage(loginMessage, 'Invalid login credentials.', 'error');
                }
            });


            // --- APP LOGIC ---
            function initializeApp() {
                portalContainer.style.display = 'none';
                appWrapper.style.display = 'flex';
                navigateTo('home-screen');
            }

            function navigateTo(screenId) {
                appContent.innerHTML = screenTemplates[screenId]();
                
                document.querySelectorAll('#app-bottom-nav .nav-item').forEach(item => {
                    item.classList.toggle('active', item.dataset.screen === screenId);
                });
                
                // Add screen-specific logic
                if (screenId === 'home-screen') {
                    loadPosts();
                    document.getElementById('reg-number-p').addEventListener('click', copyRegNumber);
                }
                if (screenId === 'upload-screen') {
                    document.getElementById('upload-form').addEventListener('submit', handleUpload);
                    document.querySelector('#upload-screen .btn-secondary').addEventListener('click', (e) => navigateTo(e.target.dataset.screen));
                }
                if(screenId === 'settings-screen') {
                    document.getElementById('app-logout-btn').addEventListener('click', logout);
                    document.querySelectorAll('.settings-item[data-setting]').forEach(item => {
                        item.addEventListener('click', () => alert(`'${item.innerText}' is not yet implemented.`))
                    })
                }
            }
            
            function copyRegNumber() {
                const regNumber = document.getElementById('reg-number-display-app').textContent;
                navigator.clipboard.writeText(regNumber).then(() => {
                    const notification = document.getElementById('copy-notification');
                    notification.style.opacity = '1';
                    notification.style.bottom = '90px';
                    setTimeout(() => {
                        notification.style.opacity = '0';
                        notification.style.bottom = '80px';
                    }, 1500);
                });
            }

            function loadPosts() {
                const postsFeed = document.getElementById('posts-feed');
                const posts = getStoredData(POSTS_DB_KEY).sort((a,b) => b.timestamp - a.timestamp);

                if (posts.length === 0) {
                    postsFeed.innerHTML = '<p id="no-posts-message">No posts are available at this time.</p>';
                    return;
                }

                postsFeed.innerHTML = posts.map(post => `
                    <div class="post-card" data-post-id="${post.id}">
                        <div class="post-header">
                            <div class="avatar">${post.author.username.charAt(0).toUpperCase()}</div>
                            <span class="username">${post.author.username}</span>
                        </div>
                        ${post.file.name ? `<div class="post-content"><p class="file-info">Attachment: ${post.file.name}</p></div>` : ''}
                        <div class="post-caption"><span class="username">${post.author.username}</span> ${post.caption}</div>
                        <div class="post-actions">
                            <i class="material-icons-outlined">favorite_border</i>
                            <i class="material-icons-outlined comment-icon">chat_bubble_outline</i>
                        </div>
                        <div class="comments-section" style="display:none;">
                            <div class="comments-list">
                                ${post.comments.map(c => `<div class="comment"><span class="username">${c.author.username}</span> ${c.text}</div>`).join('')}
                            </div>
                            <form class="comment-form">
                                <input type="text" placeholder="Add a comment..." required>
                                <button type="submit"><i class="material-icons">send</i></button>
                            </form>
                        </div>
                    </div>
                `).join('');
                
                // Add listeners for new posts
                postsFeed.querySelectorAll('.comment-icon').forEach(icon => {
                    icon.addEventListener('click', e => {
                        const commentsSection = e.target.closest('.post-card').querySelector('.comments-section');
                        commentsSection.style.display = commentsSection.style.display === 'none' ? 'block' : 'none';
                    });
                });

                postsFeed.querySelectorAll('.comment-form').forEach(form => {
                    form.addEventListener('submit', handleComment);
                });
            }

            function handleUpload(e) {
                e.preventDefault();
                const caption = document.getElementById('caption').value;
                const fileInput = document.getElementById('file-upload');

                if (!caption && !fileInput.files[0]) {
                    alert("Please add a caption or a file.");
                    return;
                }
                
                const posts = getStoredData(POSTS_DB_KEY);
                const newPost = {
                    id: Date.now(),
                    author: getCurrentUser(),
                    caption: caption,
                    file: fileInput.files[0] ? { name: fileInput.files[0].name, type: fileInput.files[0].type } : {},
                    comments: [],
                    likes: 0,
                    timestamp: Date.now()
                };
                
                posts.push(newPost);
                saveData(POSTS_DB_KEY, posts);
                navigateTo('home-screen');
            }

            function handleComment(e) {
                e.preventDefault();
                const input = e.target.querySelector('input');
                const commentText = input.value.trim();
                if (!commentText) return;

                const postId = e.target.closest('.post-card').dataset.postId;
                const posts = getStoredData(POSTS_DB_KEY);
                const post = posts.find(p => p.id == postId);
                
                if (post) {
                    post.comments.push({
                        author: getCurrentUser(),
                        text: commentText,
                        timestamp: Date.now()
                    });
                    saveData(POSTS_DB_KEY, posts);
                    input.value = '';
                    // Optimistically update UI
                    const commentsList = e.target.closest('.comments-section').querySelector('.comments-list');
                    commentsList.innerHTML += `<div class="comment"><span class="username">${getCurrentUser().username}</span> ${commentText}</div>`;
                }
            }
            
            function logout() {
                sessionStorage.removeItem('loggedInUser');
                appWrapper.style.display = 'none';
                portalContainer.style.display = 'flex';
                showPortalView('login');
                loginForm.reset();
            }
            
            appWrapper.addEventListener('click', (e) => {
                const navItem = e.target.closest('.nav-item, .top-icons > i, .btn[data-screen]');
                if (navItem && navItem.dataset.screen) {
                    e.preventDefault();
                    navigateTo(navItem.dataset.screen);
                }
            });

            // --- INITIAL LOAD ---
            if (getCurrentUser()) {
                initializeApp();
            } else {
                appWrapper.style.display = 'none';
                portalContainer.style.display = 'flex';
                showPortalView('login');
            }
        });
    </script>
</body>
</html>
